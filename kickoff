#!/bin/bash
cd "$(echo $0 | sed -E s/[^/]+$//g)"

eval WORKING_DIR=\$$TRANSIENT_DIR_POINTER
export WORKING_DIR

if [ ! -f "$WORKING_DIR/last_run" ]; then
    echo "VERSION=0" > "$WORKING_DIR/last_run"
fi
source "$WORKING_DIR/last_run"

function kc_sync_now() {
    echo "[-] Notice: syncing now."
    rsync -e "ssh -oStrictHostKeyChecking=no -i $SSH_PRIVATE_KEY" -arvz "$WORKING_DIR/root/" $SYNCREMOTE
}

function kc_postupdate_tasks_fast() {
    echo "[-] Notice: updating the iconsheets."
    for d in "$WORKING_DIR/iconcache" "$WORKING_DIR/iconsheetcache" "$WORKING_DIR/root/icons2"; do
        mkdir -p $d
    done

    ./iconsheet_new.py "$WORKING_DIR/iconcache" "$WORKING_DIR/iconsheetcache" "$WORKING_DIR/root/icons2"
    kc_sync_now
}

function kc_postupdate_tasks_ex() {
    echo "[-] Notice: cropping poses."
    ./faces.bash "$WORKING_DIR/root/chara2"
    cp genfacelists_remote.bash "$WORKING_DIR/root"

    kc_sync_now
    read -r -a REMOTE_PARAM <<< $(tr : " " <<< $SYNCREMOTE)
    echo "[-] Notice: executing genfacelists on remote."
    ssh -oStrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${REMOTE_PARAM[0]} "${REMOTE_PARAM[1]}/genfacelists_remote.bash ${REMOTE_PARAM[1]}/chara2"
}

function kc_restore_from_checkpoint() {
    cp $1 "$WORKING_DIR/__manifestloader_cache/A_SyncCache.db"
}

function kc_update() {
    local UPGRADE_VERSION=$1; shift
    echo "[-] kc_update $UPGRADE_VERSION"

    CHECKPOINT_PATH="$WORKING_DIR/__manifestloader_cache/A_SyncCache_checkpoint.db"
    cp "$WORKING_DIR/__manifestloader_cache/A_SyncCache.db" $CHECKPOINT_PATH

    SBJK_EXEC_MODE="fast" ./sbjk.py $UPGRADE_VERSION
    if [[ $? != 0 ]]; then
        kc_restore_from_checkpoint $CHECKPOINT_PATH
        echo "[!] SBJK crashed, will not update lastrun."
        rm -rf "$WORKING_DIR/root"
        return
    fi
    kc_postupdate_tasks_fast $UPGRADE_VERSION

    SBJK_EXEC_MODE="slow" ./sbjk.py $UPGRADE_VERSION
    if [[ $? != 0 ]]; then
        kc_restore_from_checkpoint $CHECKPOINT_PATH
        echo "[!] SBJK crashed, will not update lastrun."
        rm -rf "$WORKING_DIR/root"
        return
    fi
    kc_postupdate_tasks_ex $UPGRADE_VERSION

    echo "[-] SBJK complete. Writing new version to lastrun."
    echo "VERSION=$UPGRADE_VERSION" > "$WORKING_DIR/last_run"

    echo "[-] All done. Removing temproot."
    rm -rf "$WORKING_DIR/root"
}

function versioncheck() {
    if [[ "x$VERSION" == "x" ]]
        then VERSION=0
    fi

    echo "[-] Last version is $VERSION. Checking for something new..."
    for CHECKER in ./simver ./versioncheck.py ./speculate.py; do
        SERVER_VERSION=$($CHECKER $VERSION)
        if [[ $SERVER_VERSION != $VERSION ]]; then
            echo "[-] $CHECKER reports new version $SERVER_VERSION, continuing."
            kc_update $SERVER_VERSION
            break
        fi
    done
}

versioncheck